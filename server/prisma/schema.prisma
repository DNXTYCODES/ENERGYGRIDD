
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}




// model Author {
//   id             String       @id @default(auto()) @map("_id") @db.ObjectId
//   name           String
//   role           String
//   about          String
//   experience     String
// }




model Author {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  writerId     String                  @unique
  image        String
  name         String
  role         String
  about        String
  email        String
  linkedIn     String
  phone        String
  experience   String
  publications AuthorPublication[]    @relation("AuthorToPublication")
}

model Publication {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  image        String
  title        String
  content      String
  category     String
  createdAt    DateTime                @default(now())
  authors      AuthorPublication[]    @relation("PublicationToAuthor")
}

model AuthorPublication {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId       String
  publicationId  String
  author         Author    @relation("AuthorToPublication", fields: [authorId], references: [id])
  publication    Publication @relation("PublicationToAuthor", fields: [publicationId], references: [id])

  @@index([authorId])
  @@index([publicationId])
}











// model Author {
//   id           String                  @id @default(auto()) @map("_id") @db.ObjectId
//   name         String
//   role         String
//   about        String
//   experience   String
//   publications AuthorPublication[]    @relation("AuthorToPublication")
// }

// model Publication {
//   id           String                  @id @default(auto()) @map("_id") @db.ObjectId
//   title        String
//   content      String
//   createdAt    DateTime                @default(now())
//   authors      AuthorPublication[]    @relation("PublicationToAuthor")
// }

// model AuthorPublication {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   authorId       String
//   publicationId  String
//   author         Author    @relation("AuthorToPublication", fields: [authorId], references: [id])
//   publication    Publication @relation("PublicationToAuthor", fields: [publicationId], references: [id])

//   @@index([authorId])
//   @@index([publicationId])
// }















model Test {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
}





model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String   @unique
  image            String?
  // role             String   @default("user") // New field for role
  bookedVisits     Json[]
  favResidenciesID String[] @db.ObjectId
}



model Residency {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  // category    String
  // author      String 
  // price       Int
  // address     String
  // city        String
  // country     String
  image       String
  // facilities  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // @@unique(fields: [address])
}


// model Residency {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   price       Int
//   // address     String
//   // city        String
//   // country     String
//   image       String
//   // facilities  Json
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // @@unique(fields: [address])
// }
